{
	"info": {
		"_postman_id": "9ad91191-3787-42bc-9556-82dd9c7b36bf",
		"name": "HM_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17753025"
	},
	"item": [
		{
			"name": "EP_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"//Спарсить request.\r",
							"var requestJsonObject = pm.request.body.formdata.toObject();\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Test name\", function () {\r",
							"    pm.expect(responseJson.name).to.eql(\"Katya\");\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Test age\", function () {\r",
							"    pm.expect(responseJson.age).to.eql(\"24\");\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Test salary\", function () {\r",
							"    pm.expect(responseJson.salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name from request\", function () {\r",
							"    pm.expect(responseJson.name).to.eql(requestJsonObject.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age from request\", function () {\r",
							"    pm.expect(responseJson.age).to.eql(requestJsonObject.age);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check salary from request\", function () {\r",
							"    pm.expect(responseJson.salary).to.eql(parseInt(requestJsonObject.salary));\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response.\r",
							"let resp_family = responseJson.family\r",
							"console.log (\"resp_family =\", resp_family)\r",
							"\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"console.log(responseJson)\r",
							"pm.test(\"Test salary*4\", function () {\r",
							"    pm.expect(responseJson.family.u_salary_1_5_year).to.eql(parseInt(requestJsonObject.salary)*4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Katya",
							"type": "default"
						},
						{
							"key": "age",
							"value": "24",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"const responseJson = pm.response.json();\r",
							"console.log(responseJson);\r",
							"\r",
							"//Спарсить request.\r",
							"var requestJson = pm.request.url.query.toObject();\r",
							"console.log(requestJson)\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name from request\", function () {\r",
							"    pm.expect(responseJson.name).to.eql(requestJson.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age from request\", function () {\r",
							"    pm.expect(responseJson.age).to.eql(requestJson.age);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check salary from request\", function () {\r",
							"    pm.expect(responseJson.salary).to.eql(parseInt(requestJson.salary));\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response.\r",
							"let resp_family = responseJson.family\r",
							"console.log (\"resp_family =\", resp_family)\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Check dog contains name\", function () {\r",
							"    pm.expect(resp_family.pets.dog.hasOwnProperty(\"name\")).to.eql(true);\r",
							"});\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Check dog contains age\", function () {\r",
							"    pm.expect(resp_family.pets.dog.hasOwnProperty(\"age\")).to.eql(true);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Check dog name\", function () {\r",
							"    pm.expect(resp_family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Check dog age\", function () {\r",
							"    pm.expect(resp_family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Katya&age=24&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Katya"
						},
						{
							"key": "age",
							"value": "24"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"const responseJson = pm.response.json();\r",
							"console.log(responseJson);\r",
							"\r",
							"//Спарсить request.\r",
							"var requestJson = pm.request.url.query.toObject();\r",
							"console.log(requestJson)\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name from request\", function () {\r",
							"    pm.expect(responseJson.name).to.eql(requestJson.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age from request\", function () {\r",
							"    pm.expect(responseJson.age).to.eql(parseInt(requestJson.age))\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр salary из request.\r",
							"console.log(requestJson.salary)\r",
							"\r",
							"//Вывести в консоль параметр salary из response.\r",
							"console.log(responseJson.salary)\r",
							"\r",
							"//Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(responseJson.salary[0])\r",
							"\r",
							"//Вывести в консоль 1-й элемент параметра salary из response.\r",
							"console.log(responseJson.salary[1])\r",
							"\r",
							"//Вывести в консоль 2-й элемент параметра salary из response.\r",
							"console.log(responseJson.salary[2])\r",
							"\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check 0 salary ftom request\", function () {\r",
							"    pm.expect(responseJson.salary[0]).to.eql(parseInt(requestJson.salary));\r",
							"});\r",
							"\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check 1 salary ftom request\", function () {\r",
							"    pm.expect(parseInt(responseJson.salary[1])).to.eql(requestJson.salary*2);\r",
							"});\r",
							"\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Check 2 salary ftom request\", function () {\r",
							"    pm.expect(parseInt(responseJson.salary[2])).to.eql(requestJson.salary*3);\r",
							"});\r",
							"\r",
							"//Создать в окружении переменную name\r",
							"pm.environment.set(\"name\", \"Katya\");\r",
							"\r",
							"//Создать в окружении переменную age\r",
							"pm.environment.set(\"age\", 24);\r",
							"\r",
							"//Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\", 1000);\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"var count = 1;\r",
							"for(var i of responseJson.salary){\r",
							"    console.log(count,\"salary\",i)\r",
							"    count++\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"//Спарсить response body в json.\r",
							"const responseJson = pm.response.json();\r",
							"//console.log(responseJson); посмотреть результат\r",
							"\r",
							"//Спарсить request.\r",
							"var requestJsonObject = pm.request.body.formdata.toObject();\r",
							"\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"JSON response have start_qa_salary\", function () {\r",
							"    pm.expect(responseJson).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"JSON response have qa_salary_after_6_months\", function () {\r",
							"    pm.expect(responseJson).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"JSON response have qa_salary_after_12_months\", function () {\r",
							"    pm.expect(responseJson).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"JSON response have qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(responseJson).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"JSON response have qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(responseJson).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр person\r",
							"pm.test(\"JSON response have person\", function () {\r",
							"    pm.expect(responseJson).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check start_qa_salary from request\", function () {\r",
							"    pm.expect(parseInt(responseJson.start_qa_salary)).to.eql(parseInt(requestJsonObject.salary));\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							" pm.test(\"Check qa_salary_after_6_months from request\", function () {\r",
							"     pm.expect(parseInt(responseJson.qa_salary_after_6_months)).to.eql(parseInt(requestJsonObject.salary)*2);\r",
							" });\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							" pm.test(\"Check qa_salary_after_12_months from request\", function () {\r",
							"     pm.expect(parseInt(responseJson.qa_salary_after_12_months)).to.eql(parseInt(requestJsonObject.salary)*2.7);\r",
							" });\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							" pm.test(\"Check qa_salary_after_1.5_year from request\", function () {\r",
							"     pm.expect(parseInt(responseJson[\"qa_salary_after_1.5_year\"])).to.eql(parseInt(requestJsonObject.salary)*3.3);\r",
							" });\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_3.5_years from request\", function () {\r",
							"     pm.expect(parseInt(responseJson[\"qa_salary_after_3.5_years\"])).to.eql(parseInt(requestJsonObject.salary)*3.8);\r",
							" });\r",
							"\r",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check 1 person from request\", function () {\r",
							"    pm.expect(parseInt(responseJson.person.u_name[1])).to.eql(parseInt(requestJsonObject.salary));\r",
							"});\r",
							"\r",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Check age from request\", function () {\r",
							"    pm.expect(parseInt(responseJson.person.u_age)).to.eql(parseInt(requestJsonObject.age));\r",
							"});\r",
							"\r",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Check u_salary_5_years from request\", function () {\r",
							"     pm.expect(parseInt(responseJson.person.u_salary_5_years)).to.eql(parseInt(requestJsonObject.salary)*4.2);\r",
							" });\r",
							"\r",
							"//***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"var count = 1;\r",
							"for(var i in responseJson.person){\r",
							"    console.log(count,\"person\",i, responseJson.person[i])\r",
							"    count++\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "salary",
							"value": "{{salary}}",
							"disabled": true
						},
						{
							"key": "age",
							"value": "{{age}}",
							"disabled": true
						},
						{
							"key": "name",
							"value": "{{name}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}